/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LogsRouteImport } from './routes/logs'
import { Route as LibraryRouteImport } from './routes/library'
import { Route as HiddenRouteImport } from './routes/hidden'
import { Route as ExceptionRouteImport } from './routes/exception'
import { Route as DateRouteImport } from './routes/date'
import { Route as ConcurrencyRouteImport } from './routes/concurrency'
import { Route as IndexRouteImport } from './routes/index'

const LogsRoute = LogsRouteImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => rootRouteImport,
} as any)
const LibraryRoute = LibraryRouteImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => rootRouteImport,
} as any)
const HiddenRoute = HiddenRouteImport.update({
  id: '/hidden',
  path: '/hidden',
  getParentRoute: () => rootRouteImport,
} as any)
const ExceptionRoute = ExceptionRouteImport.update({
  id: '/exception',
  path: '/exception',
  getParentRoute: () => rootRouteImport,
} as any)
const DateRoute = DateRouteImport.update({
  id: '/date',
  path: '/date',
  getParentRoute: () => rootRouteImport,
} as any)
const ConcurrencyRoute = ConcurrencyRouteImport.update({
  id: '/concurrency',
  path: '/concurrency',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/concurrency': typeof ConcurrencyRoute
  '/date': typeof DateRoute
  '/exception': typeof ExceptionRoute
  '/hidden': typeof HiddenRoute
  '/library': typeof LibraryRoute
  '/logs': typeof LogsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/concurrency': typeof ConcurrencyRoute
  '/date': typeof DateRoute
  '/exception': typeof ExceptionRoute
  '/hidden': typeof HiddenRoute
  '/library': typeof LibraryRoute
  '/logs': typeof LogsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/concurrency': typeof ConcurrencyRoute
  '/date': typeof DateRoute
  '/exception': typeof ExceptionRoute
  '/hidden': typeof HiddenRoute
  '/library': typeof LibraryRoute
  '/logs': typeof LogsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/concurrency'
    | '/date'
    | '/exception'
    | '/hidden'
    | '/library'
    | '/logs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/concurrency'
    | '/date'
    | '/exception'
    | '/hidden'
    | '/library'
    | '/logs'
  id:
    | '__root__'
    | '/'
    | '/concurrency'
    | '/date'
    | '/exception'
    | '/hidden'
    | '/library'
    | '/logs'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ConcurrencyRoute: typeof ConcurrencyRoute
  DateRoute: typeof DateRoute
  ExceptionRoute: typeof ExceptionRoute
  HiddenRoute: typeof HiddenRoute
  LibraryRoute: typeof LibraryRoute
  LogsRoute: typeof LogsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/logs': {
      id: '/logs'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof LogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/library': {
      id: '/library'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof LibraryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/hidden': {
      id: '/hidden'
      path: '/hidden'
      fullPath: '/hidden'
      preLoaderRoute: typeof HiddenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/exception': {
      id: '/exception'
      path: '/exception'
      fullPath: '/exception'
      preLoaderRoute: typeof ExceptionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/date': {
      id: '/date'
      path: '/date'
      fullPath: '/date'
      preLoaderRoute: typeof DateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/concurrency': {
      id: '/concurrency'
      path: '/concurrency'
      fullPath: '/concurrency'
      preLoaderRoute: typeof ConcurrencyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ConcurrencyRoute: ConcurrencyRoute,
  DateRoute: DateRoute,
  ExceptionRoute: ExceptionRoute,
  HiddenRoute: HiddenRoute,
  LibraryRoute: LibraryRoute,
  LogsRoute: LogsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
